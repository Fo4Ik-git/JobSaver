plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.beryx.jlink' version '2.26.0'
}

project.ext {
    mainClass = 'com.fo4ik.jobsaver.Main'
    applicationName = 'Job Saver'
    applicationVersion = '2.1.1'
}

application {
    mainModule = 'com.fo4ik.jobsaver'
    mainClass = "${project.mainClass}"
    applicationName = "${project.applicationName}"
    version = "${project.applicationVersion}"
}

group 'com.fo4ik'
version project.applicationVersion

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jsoup:jsoup:1.16.1'
    implementation 'org.xerial:sqlite-jdbc:3.42.0.0'
    implementation 'commons-io:commons-io:2.13.0'
}

javafx {
    version = "20"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.media', 'javafx.graphics']
}


jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = "${project.applicationName}"
    }


    jpackage {
        imageOptions += ['--icon', 'src/main/resources/img/icon.ico']
        imageOptions += ['--vendor', 'Fo4Ik']

        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
            installerOptions += ['--win-menu-group', "${project.applicationName}"]
            installerOptions += ['--win-upgrade-uuid', generateUUID()]
            installerOptions += ['--license-file', 'LICENSE']
            //Optional
//            imageOptions += ['--win-console']
        }
    }

}

jlinkZip {
    //Set the name of the zip file
    group = 'distribution'
    archivesBaseName = "Job.Saver-windows.zip"
}

def generateUUID() {
    def inputString = "${project.applicationName}-${project.applicationVersion}"
    def uuid = UUID.nameUUIDFromBytes(inputString.getBytes())
    //print it
    println "Generated UUID: ${uuid}"
    return uuid.toString()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["--module-path", "${sourceSets.main.runtimeClasspath.collect { it.absolutePath }.join(':')}"]
}

